/* tslint:disable */
/* eslint-disable */
/**
 * Dyondo API
 * Backend API for Dyondo muliti-user blogging platform
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Blog
 */
export interface Blog {
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Blog
     */
    'body'?: string;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Tag
     */
    'topics'?: Array<string>;
}
/**
 * 
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    'name': string;
}

/**
 * DyondoApi - axios parameter creator
 * @export
 */
export const DyondoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete A Blog by the slug
         * @summary Delete A Blog by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('deleteRemoveBlog', 'slug', slug)
            const localVarPath = `/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete A Tag by the slug
         * @summary Delete A Tag by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTag: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('deleteRemoveTag', 'slug', slug)
            const localVarPath = `/tags/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete A Topic by the slug
         * @summary Delete A Topic by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTopic: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('deleteRemoveTopic', 'slug', slug)
            const localVarPath = `/topics/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Blog by the slug
         * @summary Get a Blog by the slug
         * @param {string} slug Slug of the Blog to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlog: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getRetrieveBlog', 'slug', slug)
            const localVarPath = `/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the main image of a Blog
         * @summary Get the main image of a Blog
         * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogPhoto: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getRetrieveBlogPhoto', 'slug', slug)
            const localVarPath = `/blogs/{slug}/photo`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the Blogs
         * @summary Get all the Blogs
         * @param {string} [tag] Slug of the Tag used to tag the blogs
         * @param {string} [author] username of the author that wrote the blogs
         * @param {string} [search] Term used to search the blog
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogs: async (tag?: string, author?: string, search?: string, limit?: string, skip?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Blogs and all Tags
         * @summary Get all Blogs and all Tags
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsAndTags: async (limit?: string, skip?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blogs-and-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Blogs authored by User
         * @summary Get all Blogs authored by User
         * @param {string} username Username of the author of the Blogs to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsByUser: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getRetrieveBlogsByUser', 'username', username)
            const localVarPath = `/blogs/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Blogs related to the provided Blog/slug
         * @summary Get all Blogs related to the provided Blog/slug
         * @param {string} slug Slug of the Blog related to the retrieved Blogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveRelatedBlogs: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getRetrieveRelatedBlogs', 'slug', slug)
            const localVarPath = `/blogs/{slug}/related`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get A Tag by the slug
         * @summary Get A Tag by the slug
         * @param {string} slug Slug of the Tag to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTag: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getRetrieveTag', 'slug', slug)
            const localVarPath = `/tags/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the Tags
         * @summary Get all the Tags
         * @param {string} [topic] Topic slug of the Tags to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTags: async (topic?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get A Topic by the slug
         * @summary Get A Topic by the slug
         * @param {string} slug Slug of the Topic to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopic: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getRetrieveTopic', 'slug', slug)
            const localVarPath = `/topics/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the Topics
         * @summary Get all the Topics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopics: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/topics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Blog is like an article talking about a particular Topic
         * @summary A blog is like an article talking about a particular Topic
         * @param {Blog} blog The Blog object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateBlog: async (blog: Blog, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blog' is not null or undefined
            assertParamExists('postCreateBlog', 'blog', blog)
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blog, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @param {Tag} tag The Tag object that needs to be added to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTag: async (tag: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('postCreateTag', 'tag', tag)
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A topic that a blog is about, e.g Programming, Security, etc.
         * @summary A topic that a blog is about, e.g Programming, Security, etc.
         * @param {Topic} topic The Topic object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTopic: async (topic: Topic, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topic' is not null or undefined
            assertParamExists('postCreateTopic', 'topic', topic)
            const localVarPath = `/topics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(topic, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update A Blog by the slug
         * @summary Update A Blog by the slug
         * @param {string} slug 
         * @param {Blog} blog The Blog object that needs to be updated to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateBlog: async (slug: string, blog: Blog, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('putUpdateBlog', 'slug', slug)
            // verify required parameter 'blog' is not null or undefined
            assertParamExists('putUpdateBlog', 'blog', blog)
            const localVarPath = `/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blog, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update A Tag by the slug
         * @summary Update A Tag by the slug
         * @param {string} slug 
         * @param {Tag} tag The Tag object that needs to be updated to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateTag: async (slug: string, tag: Tag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('putUpdateTag', 'slug', slug)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('putUpdateTag', 'tag', tag)
            const localVarPath = `/tags/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DyondoApi - functional programming interface
 * @export
 */
export const DyondoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DyondoApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete A Blog by the slug
         * @summary Delete A Blog by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRemoveBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRemoveBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete A Tag by the slug
         * @summary Delete A Tag by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRemoveTag(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRemoveTag(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete A Topic by the slug
         * @summary Delete A Topic by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRemoveTopic(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRemoveTopic(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Blog by the slug
         * @summary Get a Blog by the slug
         * @param {string} slug Slug of the Blog to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlog(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Blog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlog(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the main image of a Blog
         * @summary Get the main image of a Blog
         * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogPhoto(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogPhoto(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the Blogs
         * @summary Get all the Blogs
         * @param {string} [tag] Slug of the Tag used to tag the blogs
         * @param {string} [author] username of the author that wrote the blogs
         * @param {string} [search] Term used to search the blog
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogs(tag?: string, author?: string, search?: string, limit?: string, skip?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogs(tag, author, search, limit, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Blogs and all Tags
         * @summary Get all Blogs and all Tags
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogsAndTags(limit?: string, skip?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogsAndTags(limit, skip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Blogs authored by User
         * @summary Get all Blogs authored by User
         * @param {string} username Username of the author of the Blogs to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogsByUser(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogsByUser(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Blogs related to the provided Blog/slug
         * @summary Get all Blogs related to the provided Blog/slug
         * @param {string} slug Slug of the Blog related to the retrieved Blogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveRelatedBlogs(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveRelatedBlogs(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get A Tag by the slug
         * @summary Get A Tag by the slug
         * @param {string} slug Slug of the Tag to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTag(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTag(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the Tags
         * @summary Get all the Tags
         * @param {string} [topic] Topic slug of the Tags to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTags(topic?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTags(topic, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get A Topic by the slug
         * @summary Get A Topic by the slug
         * @param {string} slug Slug of the Topic to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTopic(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTopic(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the Topics
         * @summary Get all the Topics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTopics(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTopics(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A Blog is like an article talking about a particular Topic
         * @summary A blog is like an article talking about a particular Topic
         * @param {Blog} blog The Blog object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateBlog(blog: Blog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateBlog(blog, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @param {Tag} tag The Tag object that needs to be added to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateTag(tag: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateTag(tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A topic that a blog is about, e.g Programming, Security, etc.
         * @summary A topic that a blog is about, e.g Programming, Security, etc.
         * @param {Topic} topic The Topic object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateTopic(topic: Topic, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateTopic(topic, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update A Blog by the slug
         * @summary Update A Blog by the slug
         * @param {string} slug 
         * @param {Blog} blog The Blog object that needs to be updated to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateBlog(slug: string, blog: Blog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUpdateBlog(slug, blog, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update A Tag by the slug
         * @summary Update A Tag by the slug
         * @param {string} slug 
         * @param {Tag} tag The Tag object that needs to be updated to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateTag(slug: string, tag: Tag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUpdateTag(slug, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DyondoApi - factory interface
 * @export
 */
export const DyondoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DyondoApiFp(configuration)
    return {
        /**
         * Delete A Blog by the slug
         * @summary Delete A Blog by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveBlog(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRemoveBlog(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete A Tag by the slug
         * @summary Delete A Tag by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTag(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRemoveTag(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete A Topic by the slug
         * @summary Delete A Topic by the slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTopic(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRemoveTopic(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Blog by the slug
         * @summary Get a Blog by the slug
         * @param {string} slug Slug of the Blog to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlog(slug: string, options?: any): AxiosPromise<Blog> {
            return localVarFp.getRetrieveBlog(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the main image of a Blog
         * @summary Get the main image of a Blog
         * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogPhoto(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.getRetrieveBlogPhoto(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the Blogs
         * @summary Get all the Blogs
         * @param {string} [tag] Slug of the Tag used to tag the blogs
         * @param {string} [author] username of the author that wrote the blogs
         * @param {string} [search] Term used to search the blog
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogs(tag?: string, author?: string, search?: string, limit?: string, skip?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getRetrieveBlogs(tag, author, search, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Blogs and all Tags
         * @summary Get all Blogs and all Tags
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsAndTags(limit?: string, skip?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getRetrieveBlogsAndTags(limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Blogs authored by User
         * @summary Get all Blogs authored by User
         * @param {string} username Username of the author of the Blogs to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsByUser(username: string, options?: any): AxiosPromise<void> {
            return localVarFp.getRetrieveBlogsByUser(username, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Blogs related to the provided Blog/slug
         * @summary Get all Blogs related to the provided Blog/slug
         * @param {string} slug Slug of the Blog related to the retrieved Blogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveRelatedBlogs(slug: string, options?: any): AxiosPromise<void> {
            return localVarFp.getRetrieveRelatedBlogs(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get A Tag by the slug
         * @summary Get A Tag by the slug
         * @param {string} slug Slug of the Tag to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTag(slug: string, options?: any): AxiosPromise<Tag> {
            return localVarFp.getRetrieveTag(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the Tags
         * @summary Get all the Tags
         * @param {string} [topic] Topic slug of the Tags to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTags(topic?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getRetrieveTags(topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Get A Topic by the slug
         * @summary Get A Topic by the slug
         * @param {string} slug Slug of the Topic to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopic(slug: string, options?: any): AxiosPromise<Topic> {
            return localVarFp.getRetrieveTopic(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the Topics
         * @summary Get all the Topics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopics(options?: any): AxiosPromise<void> {
            return localVarFp.getRetrieveTopics(options).then((request) => request(axios, basePath));
        },
        /**
         * A Blog is like an article talking about a particular Topic
         * @summary A blog is like an article talking about a particular Topic
         * @param {Blog} blog The Blog object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateBlog(blog: Blog, options?: any): AxiosPromise<void> {
            return localVarFp.postCreateBlog(blog, options).then((request) => request(axios, basePath));
        },
        /**
         * A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @param {Tag} tag The Tag object that needs to be added to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTag(tag: Tag, options?: any): AxiosPromise<void> {
            return localVarFp.postCreateTag(tag, options).then((request) => request(axios, basePath));
        },
        /**
         * A topic that a blog is about, e.g Programming, Security, etc.
         * @summary A topic that a blog is about, e.g Programming, Security, etc.
         * @param {Topic} topic The Topic object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTopic(topic: Topic, options?: any): AxiosPromise<void> {
            return localVarFp.postCreateTopic(topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Update A Blog by the slug
         * @summary Update A Blog by the slug
         * @param {string} slug 
         * @param {Blog} blog The Blog object that needs to be updated to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateBlog(slug: string, blog: Blog, options?: any): AxiosPromise<void> {
            return localVarFp.putUpdateBlog(slug, blog, options).then((request) => request(axios, basePath));
        },
        /**
         * Update A Tag by the slug
         * @summary Update A Tag by the slug
         * @param {string} slug 
         * @param {Tag} tag The Tag object that needs to be updated to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateTag(slug: string, tag: Tag, options?: any): AxiosPromise<void> {
            return localVarFp.putUpdateTag(slug, tag, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteRemoveBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiDeleteRemoveBlogRequest
 */
export interface DyondoApiDeleteRemoveBlogRequest {
    /**
     * 
     * @type {string}
     * @memberof DyondoApiDeleteRemoveBlog
     */
    readonly slug: string
}

/**
 * Request parameters for deleteRemoveTag operation in DyondoApi.
 * @export
 * @interface DyondoApiDeleteRemoveTagRequest
 */
export interface DyondoApiDeleteRemoveTagRequest {
    /**
     * 
     * @type {string}
     * @memberof DyondoApiDeleteRemoveTag
     */
    readonly slug: string
}

/**
 * Request parameters for deleteRemoveTopic operation in DyondoApi.
 * @export
 * @interface DyondoApiDeleteRemoveTopicRequest
 */
export interface DyondoApiDeleteRemoveTopicRequest {
    /**
     * 
     * @type {string}
     * @memberof DyondoApiDeleteRemoveTopic
     */
    readonly slug: string
}

/**
 * Request parameters for getRetrieveBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogRequest
 */
export interface DyondoApiGetRetrieveBlogRequest {
    /**
     * Slug of the Blog to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlog
     */
    readonly slug: string
}

/**
 * Request parameters for getRetrieveBlogPhoto operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogPhotoRequest
 */
export interface DyondoApiGetRetrieveBlogPhotoRequest {
    /**
     * Slug of the Blog\&#39;s image to be retrieved
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogPhoto
     */
    readonly slug: string
}

/**
 * Request parameters for getRetrieveBlogs operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogsRequest
 */
export interface DyondoApiGetRetrieveBlogsRequest {
    /**
     * Slug of the Tag used to tag the blogs
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly tag?: string

    /**
     * username of the author that wrote the blogs
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly author?: string

    /**
     * Term used to search the blog
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly search?: string

    /**
     * Number of Blogs and Tags to be returned per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly limit?: string

    /**
     * Number of Blogs and Tags to be skipped per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly skip?: string
}

/**
 * Request parameters for getRetrieveBlogsAndTags operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogsAndTagsRequest
 */
export interface DyondoApiGetRetrieveBlogsAndTagsRequest {
    /**
     * Number of Blogs and Tags to be returned per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogsAndTags
     */
    readonly limit?: string

    /**
     * Number of Blogs and Tags to be skipped per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogsAndTags
     */
    readonly skip?: string
}

/**
 * Request parameters for getRetrieveBlogsByUser operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogsByUserRequest
 */
export interface DyondoApiGetRetrieveBlogsByUserRequest {
    /**
     * Username of the author of the Blogs to be retrieved
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogsByUser
     */
    readonly username: string
}

/**
 * Request parameters for getRetrieveRelatedBlogs operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveRelatedBlogsRequest
 */
export interface DyondoApiGetRetrieveRelatedBlogsRequest {
    /**
     * Slug of the Blog related to the retrieved Blogs
     * @type {string}
     * @memberof DyondoApiGetRetrieveRelatedBlogs
     */
    readonly slug: string
}

/**
 * Request parameters for getRetrieveTag operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveTagRequest
 */
export interface DyondoApiGetRetrieveTagRequest {
    /**
     * Slug of the Tag to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveTag
     */
    readonly slug: string
}

/**
 * Request parameters for getRetrieveTags operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveTagsRequest
 */
export interface DyondoApiGetRetrieveTagsRequest {
    /**
     * Topic slug of the Tags to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveTags
     */
    readonly topic?: string
}

/**
 * Request parameters for getRetrieveTopic operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveTopicRequest
 */
export interface DyondoApiGetRetrieveTopicRequest {
    /**
     * Slug of the Topic to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveTopic
     */
    readonly slug: string
}

/**
 * Request parameters for postCreateBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiPostCreateBlogRequest
 */
export interface DyondoApiPostCreateBlogRequest {
    /**
     * The Blog object that needs to be added to the database
     * @type {Blog}
     * @memberof DyondoApiPostCreateBlog
     */
    readonly blog: Blog
}

/**
 * Request parameters for postCreateTag operation in DyondoApi.
 * @export
 * @interface DyondoApiPostCreateTagRequest
 */
export interface DyondoApiPostCreateTagRequest {
    /**
     * The Tag object that needs to be added to the DB
     * @type {Tag}
     * @memberof DyondoApiPostCreateTag
     */
    readonly tag: Tag
}

/**
 * Request parameters for postCreateTopic operation in DyondoApi.
 * @export
 * @interface DyondoApiPostCreateTopicRequest
 */
export interface DyondoApiPostCreateTopicRequest {
    /**
     * The Topic object that needs to be added to the database
     * @type {Topic}
     * @memberof DyondoApiPostCreateTopic
     */
    readonly topic: Topic
}

/**
 * Request parameters for putUpdateBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiPutUpdateBlogRequest
 */
export interface DyondoApiPutUpdateBlogRequest {
    /**
     * 
     * @type {string}
     * @memberof DyondoApiPutUpdateBlog
     */
    readonly slug: string

    /**
     * The Blog object that needs to be updated to the DB
     * @type {Blog}
     * @memberof DyondoApiPutUpdateBlog
     */
    readonly blog: Blog
}

/**
 * Request parameters for putUpdateTag operation in DyondoApi.
 * @export
 * @interface DyondoApiPutUpdateTagRequest
 */
export interface DyondoApiPutUpdateTagRequest {
    /**
     * 
     * @type {string}
     * @memberof DyondoApiPutUpdateTag
     */
    readonly slug: string

    /**
     * The Tag object that needs to be updated to the database
     * @type {Tag}
     * @memberof DyondoApiPutUpdateTag
     */
    readonly tag: Tag
}

/**
 * DyondoApi - object-oriented interface
 * @export
 * @class DyondoApi
 * @extends {BaseAPI}
 */
export class DyondoApi extends BaseAPI {
    /**
     * Delete A Blog by the slug
     * @summary Delete A Blog by the slug
     * @param {DyondoApiDeleteRemoveBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public deleteRemoveBlog(requestParameters: DyondoApiDeleteRemoveBlogRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).deleteRemoveBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete A Tag by the slug
     * @summary Delete A Tag by the slug
     * @param {DyondoApiDeleteRemoveTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public deleteRemoveTag(requestParameters: DyondoApiDeleteRemoveTagRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).deleteRemoveTag(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete A Topic by the slug
     * @summary Delete A Topic by the slug
     * @param {DyondoApiDeleteRemoveTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public deleteRemoveTopic(requestParameters: DyondoApiDeleteRemoveTopicRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).deleteRemoveTopic(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Blog by the slug
     * @summary Get a Blog by the slug
     * @param {DyondoApiGetRetrieveBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveBlog(requestParameters: DyondoApiGetRetrieveBlogRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the main image of a Blog
     * @summary Get the main image of a Blog
     * @param {DyondoApiGetRetrieveBlogPhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveBlogPhoto(requestParameters: DyondoApiGetRetrieveBlogPhotoRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveBlogPhoto(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the Blogs
     * @summary Get all the Blogs
     * @param {DyondoApiGetRetrieveBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveBlogs(requestParameters: DyondoApiGetRetrieveBlogsRequest = {}, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveBlogs(requestParameters.tag, requestParameters.author, requestParameters.search, requestParameters.limit, requestParameters.skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Blogs and all Tags
     * @summary Get all Blogs and all Tags
     * @param {DyondoApiGetRetrieveBlogsAndTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveBlogsAndTags(requestParameters: DyondoApiGetRetrieveBlogsAndTagsRequest = {}, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveBlogsAndTags(requestParameters.limit, requestParameters.skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Blogs authored by User
     * @summary Get all Blogs authored by User
     * @param {DyondoApiGetRetrieveBlogsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveBlogsByUser(requestParameters: DyondoApiGetRetrieveBlogsByUserRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveBlogsByUser(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Blogs related to the provided Blog/slug
     * @summary Get all Blogs related to the provided Blog/slug
     * @param {DyondoApiGetRetrieveRelatedBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveRelatedBlogs(requestParameters: DyondoApiGetRetrieveRelatedBlogsRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveRelatedBlogs(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get A Tag by the slug
     * @summary Get A Tag by the slug
     * @param {DyondoApiGetRetrieveTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveTag(requestParameters: DyondoApiGetRetrieveTagRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveTag(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the Tags
     * @summary Get all the Tags
     * @param {DyondoApiGetRetrieveTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveTags(requestParameters: DyondoApiGetRetrieveTagsRequest = {}, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveTags(requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get A Topic by the slug
     * @summary Get A Topic by the slug
     * @param {DyondoApiGetRetrieveTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveTopic(requestParameters: DyondoApiGetRetrieveTopicRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveTopic(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the Topics
     * @summary Get all the Topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public getRetrieveTopics(options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).getRetrieveTopics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A Blog is like an article talking about a particular Topic
     * @summary A blog is like an article talking about a particular Topic
     * @param {DyondoApiPostCreateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public postCreateBlog(requestParameters: DyondoApiPostCreateBlogRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).postCreateBlog(requestParameters.blog, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @param {DyondoApiPostCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public postCreateTag(requestParameters: DyondoApiPostCreateTagRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).postCreateTag(requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A topic that a blog is about, e.g Programming, Security, etc.
     * @summary A topic that a blog is about, e.g Programming, Security, etc.
     * @param {DyondoApiPostCreateTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public postCreateTopic(requestParameters: DyondoApiPostCreateTopicRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).postCreateTopic(requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update A Blog by the slug
     * @summary Update A Blog by the slug
     * @param {DyondoApiPutUpdateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public putUpdateBlog(requestParameters: DyondoApiPutUpdateBlogRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).putUpdateBlog(requestParameters.slug, requestParameters.blog, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update A Tag by the slug
     * @summary Update A Tag by the slug
     * @param {DyondoApiPutUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    public putUpdateTag(requestParameters: DyondoApiPutUpdateTagRequest, options?: AxiosRequestConfig) {
        return DyondoApiFp(this.configuration).putUpdateTag(requestParameters.slug, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }
}


