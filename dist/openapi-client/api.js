"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dyondo API
 * Backend API for Dyondo muliti-user blogging platform
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DyondoApi = exports.DyondoApiFactory = exports.DyondoApiFp = exports.DyondoApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * DyondoApi - axios parameter creator
 * @export
 */
const DyondoApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete A Blog by the slug
         * @summary Delete A Blog by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveBlog: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('deleteRemoveBlog', 'slug', slug);
            const localVarPath = `/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete A Tag by the slug
         * @summary Delete A Tag by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTag: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('deleteRemoveTag', 'slug', slug);
            const localVarPath = `/tags/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete A Topic by the slug
         * @summary Delete A Topic by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTopic: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('deleteRemoveTopic', 'slug', slug);
            const localVarPath = `/topics/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Blog by the slug
         * @summary Get a Blog by the slug
         * @param {string} slug Slug of the Blog to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlog: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('getRetrieveBlog', 'slug', slug);
            const localVarPath = `/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the main image of a Blog
         * @summary Get the main image of a Blog
         * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogPhoto: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('getRetrieveBlogPhoto', 'slug', slug);
            const localVarPath = `/blogs/{slug}/photo`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the Blogs
         * @summary Get all the Blogs
         * @param {string} [tag] Slug of the Tag used to tag the blogs
         * @param {string} [author] username of the author that wrote the blogs
         * @param {string} [search] Term used to search the blog
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogs: async (tag, author, search, limit, skip, options = {}) => {
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }
            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Blogs and all Tags
         * @summary Get all Blogs and all Tags
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsAndTags: async (limit, skip, options = {}) => {
            const localVarPath = `/blogs-and-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Blogs authored by User
         * @summary Get all Blogs authored by User
         * @param {string} username Username of the author of the Blogs to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsByUser: async (username, options = {}) => {
            // verify required parameter 'username' is not null or undefined
            (0, common_1.assertParamExists)('getRetrieveBlogsByUser', 'username', username);
            const localVarPath = `/blogs/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Blogs related to the provided Blog/slug
         * @summary Get all Blogs related to the provided Blog/slug
         * @param {string} slug Slug of the Blog related to the retrieved Blogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveRelatedBlogs: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('getRetrieveRelatedBlogs', 'slug', slug);
            const localVarPath = `/blogs/{slug}/related`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get A Tag by the slug
         * @summary Get A Tag by the slug
         * @param {string} slug Slug of the Tag to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTag: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('getRetrieveTag', 'slug', slug);
            const localVarPath = `/tags/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the Tags
         * @summary Get all the Tags
         * @param {string} [topic] Topic slug of the Tags to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTags: async (topic, options = {}) => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get A Topic by the slug
         * @summary Get A Topic by the slug
         * @param {string} slug Slug of the Topic to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopic: async (slug, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('getRetrieveTopic', 'slug', slug);
            const localVarPath = `/topics/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the Topics
         * @summary Get all the Topics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopics: async (options = {}) => {
            const localVarPath = `/topics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Blog is like an article talking about a particular Topic
         * @summary A blog is like an article talking about a particular Topic
         * @param {Blog} blog The Blog object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateBlog: async (blog, options = {}) => {
            // verify required parameter 'blog' is not null or undefined
            (0, common_1.assertParamExists)('postCreateBlog', 'blog', blog);
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(blog, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @param {Tag} tag The Tag object that needs to be added to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTag: async (tag, options = {}) => {
            // verify required parameter 'tag' is not null or undefined
            (0, common_1.assertParamExists)('postCreateTag', 'tag', tag);
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tag, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A topic that a blog is about, e.g Programming, Security, etc.
         * @summary A topic that a blog is about, e.g Programming, Security, etc.
         * @param {Topic} topic The Topic object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTopic: async (topic, options = {}) => {
            // verify required parameter 'topic' is not null or undefined
            (0, common_1.assertParamExists)('postCreateTopic', 'topic', topic);
            const localVarPath = `/topics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(topic, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update A Blog by the slug
         * @summary Update A Blog by the slug
         * @param {string} slug
         * @param {Blog} blog The Blog object that needs to be updated to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateBlog: async (slug, blog, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('putUpdateBlog', 'slug', slug);
            // verify required parameter 'blog' is not null or undefined
            (0, common_1.assertParamExists)('putUpdateBlog', 'blog', blog);
            const localVarPath = `/blogs/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(blog, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update A Tag by the slug
         * @summary Update A Tag by the slug
         * @param {string} slug
         * @param {Tag} tag The Tag object that needs to be updated to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateTag: async (slug, tag, options = {}) => {
            // verify required parameter 'slug' is not null or undefined
            (0, common_1.assertParamExists)('putUpdateTag', 'slug', slug);
            // verify required parameter 'tag' is not null or undefined
            (0, common_1.assertParamExists)('putUpdateTag', 'tag', tag);
            const localVarPath = `/tags/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tag, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DyondoApiAxiosParamCreator = DyondoApiAxiosParamCreator;
/**
 * DyondoApi - functional programming interface
 * @export
 */
const DyondoApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DyondoApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete A Blog by the slug
         * @summary Delete A Blog by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRemoveBlog(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRemoveBlog(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Delete A Tag by the slug
         * @summary Delete A Tag by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRemoveTag(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRemoveTag(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Delete A Topic by the slug
         * @summary Delete A Topic by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRemoveTopic(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRemoveTopic(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a Blog by the slug
         * @summary Get a Blog by the slug
         * @param {string} slug Slug of the Blog to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlog(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlog(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get the main image of a Blog
         * @summary Get the main image of a Blog
         * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogPhoto(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogPhoto(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get all the Blogs
         * @summary Get all the Blogs
         * @param {string} [tag] Slug of the Tag used to tag the blogs
         * @param {string} [author] username of the author that wrote the blogs
         * @param {string} [search] Term used to search the blog
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogs(tag, author, search, limit, skip, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogs(tag, author, search, limit, skip, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get all Blogs and all Tags
         * @summary Get all Blogs and all Tags
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogsAndTags(limit, skip, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogsAndTags(limit, skip, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get all Blogs authored by User
         * @summary Get all Blogs authored by User
         * @param {string} username Username of the author of the Blogs to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveBlogsByUser(username, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveBlogsByUser(username, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get all Blogs related to the provided Blog/slug
         * @summary Get all Blogs related to the provided Blog/slug
         * @param {string} slug Slug of the Blog related to the retrieved Blogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveRelatedBlogs(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveRelatedBlogs(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get A Tag by the slug
         * @summary Get A Tag by the slug
         * @param {string} slug Slug of the Tag to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTag(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTag(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get all the Tags
         * @summary Get all the Tags
         * @param {string} [topic] Topic slug of the Tags to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTags(topic, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTags(topic, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get A Topic by the slug
         * @summary Get A Topic by the slug
         * @param {string} slug Slug of the Topic to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTopic(slug, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTopic(slug, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get all the Topics
         * @summary Get all the Topics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRetrieveTopics(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRetrieveTopics(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * A Blog is like an article talking about a particular Topic
         * @summary A blog is like an article talking about a particular Topic
         * @param {Blog} blog The Blog object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateBlog(blog, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateBlog(blog, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @param {Tag} tag The Tag object that needs to be added to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateTag(tag, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateTag(tag, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * A topic that a blog is about, e.g Programming, Security, etc.
         * @summary A topic that a blog is about, e.g Programming, Security, etc.
         * @param {Topic} topic The Topic object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateTopic(topic, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateTopic(topic, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update A Blog by the slug
         * @summary Update A Blog by the slug
         * @param {string} slug
         * @param {Blog} blog The Blog object that needs to be updated to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateBlog(slug, blog, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUpdateBlog(slug, blog, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Update A Tag by the slug
         * @summary Update A Tag by the slug
         * @param {string} slug
         * @param {Tag} tag The Tag object that needs to be updated to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUpdateTag(slug, tag, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUpdateTag(slug, tag, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DyondoApiFp = DyondoApiFp;
/**
 * DyondoApi - factory interface
 * @export
 */
const DyondoApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DyondoApiFp)(configuration);
    return {
        /**
         * Delete A Blog by the slug
         * @summary Delete A Blog by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveBlog(slug, options) {
            return localVarFp.deleteRemoveBlog(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete A Tag by the slug
         * @summary Delete A Tag by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTag(slug, options) {
            return localVarFp.deleteRemoveTag(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete A Topic by the slug
         * @summary Delete A Topic by the slug
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemoveTopic(slug, options) {
            return localVarFp.deleteRemoveTopic(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Blog by the slug
         * @summary Get a Blog by the slug
         * @param {string} slug Slug of the Blog to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlog(slug, options) {
            return localVarFp.getRetrieveBlog(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the main image of a Blog
         * @summary Get the main image of a Blog
         * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogPhoto(slug, options) {
            return localVarFp.getRetrieveBlogPhoto(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the Blogs
         * @summary Get all the Blogs
         * @param {string} [tag] Slug of the Tag used to tag the blogs
         * @param {string} [author] username of the author that wrote the blogs
         * @param {string} [search] Term used to search the blog
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogs(tag, author, search, limit, skip, options) {
            return localVarFp.getRetrieveBlogs(tag, author, search, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Blogs and all Tags
         * @summary Get all Blogs and all Tags
         * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
         * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsAndTags(limit, skip, options) {
            return localVarFp.getRetrieveBlogsAndTags(limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Blogs authored by User
         * @summary Get all Blogs authored by User
         * @param {string} username Username of the author of the Blogs to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveBlogsByUser(username, options) {
            return localVarFp.getRetrieveBlogsByUser(username, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Blogs related to the provided Blog/slug
         * @summary Get all Blogs related to the provided Blog/slug
         * @param {string} slug Slug of the Blog related to the retrieved Blogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveRelatedBlogs(slug, options) {
            return localVarFp.getRetrieveRelatedBlogs(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get A Tag by the slug
         * @summary Get A Tag by the slug
         * @param {string} slug Slug of the Tag to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTag(slug, options) {
            return localVarFp.getRetrieveTag(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the Tags
         * @summary Get all the Tags
         * @param {string} [topic] Topic slug of the Tags to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTags(topic, options) {
            return localVarFp.getRetrieveTags(topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Get A Topic by the slug
         * @summary Get A Topic by the slug
         * @param {string} slug Slug of the Topic to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopic(slug, options) {
            return localVarFp.getRetrieveTopic(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the Topics
         * @summary Get all the Topics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRetrieveTopics(options) {
            return localVarFp.getRetrieveTopics(options).then((request) => request(axios, basePath));
        },
        /**
         * A Blog is like an article talking about a particular Topic
         * @summary A blog is like an article talking about a particular Topic
         * @param {Blog} blog The Blog object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateBlog(blog, options) {
            return localVarFp.postCreateBlog(blog, options).then((request) => request(axios, basePath));
        },
        /**
         * A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
         * @param {Tag} tag The Tag object that needs to be added to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTag(tag, options) {
            return localVarFp.postCreateTag(tag, options).then((request) => request(axios, basePath));
        },
        /**
         * A topic that a blog is about, e.g Programming, Security, etc.
         * @summary A topic that a blog is about, e.g Programming, Security, etc.
         * @param {Topic} topic The Topic object that needs to be added to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateTopic(topic, options) {
            return localVarFp.postCreateTopic(topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Update A Blog by the slug
         * @summary Update A Blog by the slug
         * @param {string} slug
         * @param {Blog} blog The Blog object that needs to be updated to the DB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateBlog(slug, blog, options) {
            return localVarFp.putUpdateBlog(slug, blog, options).then((request) => request(axios, basePath));
        },
        /**
         * Update A Tag by the slug
         * @summary Update A Tag by the slug
         * @param {string} slug
         * @param {Tag} tag The Tag object that needs to be updated to the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateTag(slug, tag, options) {
            return localVarFp.putUpdateTag(slug, tag, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DyondoApiFactory = DyondoApiFactory;
/**
 * DyondoApi - object-oriented interface
 * @export
 * @class DyondoApi
 * @extends {BaseAPI}
 */
class DyondoApi extends base_1.BaseAPI {
    /**
     * Delete A Blog by the slug
     * @summary Delete A Blog by the slug
     * @param {DyondoApiDeleteRemoveBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    deleteRemoveBlog(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).deleteRemoveBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete A Tag by the slug
     * @summary Delete A Tag by the slug
     * @param {DyondoApiDeleteRemoveTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    deleteRemoveTag(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).deleteRemoveTag(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete A Topic by the slug
     * @summary Delete A Topic by the slug
     * @param {DyondoApiDeleteRemoveTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    deleteRemoveTopic(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).deleteRemoveTopic(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Blog by the slug
     * @summary Get a Blog by the slug
     * @param {DyondoApiGetRetrieveBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlog(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveBlog(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the main image of a Blog
     * @summary Get the main image of a Blog
     * @param {DyondoApiGetRetrieveBlogPhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogPhoto(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveBlogPhoto(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the Blogs
     * @summary Get all the Blogs
     * @param {DyondoApiGetRetrieveBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogs(requestParameters = {}, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveBlogs(requestParameters.tag, requestParameters.author, requestParameters.search, requestParameters.limit, requestParameters.skip, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Blogs and all Tags
     * @summary Get all Blogs and all Tags
     * @param {DyondoApiGetRetrieveBlogsAndTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogsAndTags(requestParameters = {}, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveBlogsAndTags(requestParameters.limit, requestParameters.skip, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Blogs authored by User
     * @summary Get all Blogs authored by User
     * @param {DyondoApiGetRetrieveBlogsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogsByUser(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveBlogsByUser(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all Blogs related to the provided Blog/slug
     * @summary Get all Blogs related to the provided Blog/slug
     * @param {DyondoApiGetRetrieveRelatedBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveRelatedBlogs(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveRelatedBlogs(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get A Tag by the slug
     * @summary Get A Tag by the slug
     * @param {DyondoApiGetRetrieveTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTag(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveTag(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the Tags
     * @summary Get all the Tags
     * @param {DyondoApiGetRetrieveTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTags(requestParameters = {}, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveTags(requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get A Topic by the slug
     * @summary Get A Topic by the slug
     * @param {DyondoApiGetRetrieveTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTopic(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveTopic(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all the Topics
     * @summary Get all the Topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTopics(options) {
        return (0, exports.DyondoApiFp)(this.configuration).getRetrieveTopics(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A Blog is like an article talking about a particular Topic
     * @summary A blog is like an article talking about a particular Topic
     * @param {DyondoApiPostCreateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    postCreateBlog(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).postCreateBlog(requestParameters.blog, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @param {DyondoApiPostCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    postCreateTag(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).postCreateTag(requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * A topic that a blog is about, e.g Programming, Security, etc.
     * @summary A topic that a blog is about, e.g Programming, Security, etc.
     * @param {DyondoApiPostCreateTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    postCreateTopic(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).postCreateTopic(requestParameters.topic, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update A Blog by the slug
     * @summary Update A Blog by the slug
     * @param {DyondoApiPutUpdateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    putUpdateBlog(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).putUpdateBlog(requestParameters.slug, requestParameters.blog, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update A Tag by the slug
     * @summary Update A Tag by the slug
     * @param {DyondoApiPutUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    putUpdateTag(requestParameters, options) {
        return (0, exports.DyondoApiFp)(this.configuration).putUpdateTag(requestParameters.slug, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DyondoApi = DyondoApi;
//# sourceMappingURL=data:application/json;base64,