/**
 * Dyondo API
 * Backend API for Dyondo muliti-user blogging platform
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Blog
 */
export interface Blog {
    /**
     *
     * @type {string}
     * @memberof Blog
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof Blog
     */
    'body'?: string;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof Tag
     */
    'topics'?: Array<string>;
}
/**
 *
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    'name': string;
}
/**
 * DyondoApi - axios parameter creator
 * @export
 */
export declare const DyondoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Delete A Blog by the slug
     * @summary Delete A Blog by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveBlog: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete A Tag by the slug
     * @summary Delete A Tag by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveTag: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete A Topic by the slug
     * @summary Delete A Topic by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveTopic: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a Blog by the slug
     * @summary Get a Blog by the slug
     * @param {string} slug Slug of the Blog to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlog: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the main image of a Blog
     * @summary Get the main image of a Blog
     * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogPhoto: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all the Blogs
     * @summary Get all the Blogs
     * @param {string} [tag] Slug of the Tag used to tag the blogs
     * @param {string} [author] username of the author that wrote the blogs
     * @param {string} [search] Term used to search the blog
     * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
     * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogs: (tag?: string | undefined, author?: string | undefined, search?: string | undefined, limit?: string | undefined, skip?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all Blogs and all Tags
     * @summary Get all Blogs and all Tags
     * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
     * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogsAndTags: (limit?: string | undefined, skip?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all Blogs authored by User
     * @summary Get all Blogs authored by User
     * @param {string} username Username of the author of the Blogs to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogsByUser: (username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all Blogs related to the provided Blog/slug
     * @summary Get all Blogs related to the provided Blog/slug
     * @param {string} slug Slug of the Blog related to the retrieved Blogs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveRelatedBlogs: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get A Tag by the slug
     * @summary Get A Tag by the slug
     * @param {string} slug Slug of the Tag to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTag: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all the Tags
     * @summary Get all the Tags
     * @param {string} [topic] Topic slug of the Tags to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTags: (topic?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get A Topic by the slug
     * @summary Get A Topic by the slug
     * @param {string} slug Slug of the Topic to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTopic: (slug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all the Topics
     * @summary Get all the Topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTopics: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A Blog is like an article talking about a particular Topic
     * @summary A blog is like an article talking about a particular Topic
     * @param {Blog} blog The Blog object that needs to be added to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateBlog: (blog: Blog, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @param {Tag} tag The Tag object that needs to be added to the DB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateTag: (tag: Tag, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * A topic that a blog is about, e.g Programming, Security, etc.
     * @summary A topic that a blog is about, e.g Programming, Security, etc.
     * @param {Topic} topic The Topic object that needs to be added to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateTopic: (topic: Topic, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update A Blog by the slug
     * @summary Update A Blog by the slug
     * @param {string} slug
     * @param {Blog} blog The Blog object that needs to be updated to the DB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUpdateBlog: (slug: string, blog: Blog, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update A Tag by the slug
     * @summary Update A Tag by the slug
     * @param {string} slug
     * @param {Tag} tag The Tag object that needs to be updated to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUpdateTag: (slug: string, tag: Tag, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DyondoApi - functional programming interface
 * @export
 */
export declare const DyondoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Delete A Blog by the slug
     * @summary Delete A Blog by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveBlog(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Delete A Tag by the slug
     * @summary Delete A Tag by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveTag(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Delete A Topic by the slug
     * @summary Delete A Topic by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveTopic(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get a Blog by the slug
     * @summary Get a Blog by the slug
     * @param {string} slug Slug of the Blog to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlog(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Blog>>;
    /**
     * Get the main image of a Blog
     * @summary Get the main image of a Blog
     * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogPhoto(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get all the Blogs
     * @summary Get all the Blogs
     * @param {string} [tag] Slug of the Tag used to tag the blogs
     * @param {string} [author] username of the author that wrote the blogs
     * @param {string} [search] Term used to search the blog
     * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
     * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogs(tag?: string | undefined, author?: string | undefined, search?: string | undefined, limit?: string | undefined, skip?: string | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get all Blogs and all Tags
     * @summary Get all Blogs and all Tags
     * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
     * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogsAndTags(limit?: string | undefined, skip?: string | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get all Blogs authored by User
     * @summary Get all Blogs authored by User
     * @param {string} username Username of the author of the Blogs to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogsByUser(username: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get all Blogs related to the provided Blog/slug
     * @summary Get all Blogs related to the provided Blog/slug
     * @param {string} slug Slug of the Blog related to the retrieved Blogs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveRelatedBlogs(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get A Tag by the slug
     * @summary Get A Tag by the slug
     * @param {string} slug Slug of the Tag to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTag(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tag>>;
    /**
     * Get all the Tags
     * @summary Get all the Tags
     * @param {string} [topic] Topic slug of the Tags to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTags(topic?: string | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get A Topic by the slug
     * @summary Get A Topic by the slug
     * @param {string} slug Slug of the Topic to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTopic(slug: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Topic>>;
    /**
     * Get all the Topics
     * @summary Get all the Topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTopics(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * A Blog is like an article talking about a particular Topic
     * @summary A blog is like an article talking about a particular Topic
     * @param {Blog} blog The Blog object that needs to be added to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateBlog(blog: Blog, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @param {Tag} tag The Tag object that needs to be added to the DB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateTag(tag: Tag, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * A topic that a blog is about, e.g Programming, Security, etc.
     * @summary A topic that a blog is about, e.g Programming, Security, etc.
     * @param {Topic} topic The Topic object that needs to be added to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateTopic(topic: Topic, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update A Blog by the slug
     * @summary Update A Blog by the slug
     * @param {string} slug
     * @param {Blog} blog The Blog object that needs to be updated to the DB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUpdateBlog(slug: string, blog: Blog, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update A Tag by the slug
     * @summary Update A Tag by the slug
     * @param {string} slug
     * @param {Tag} tag The Tag object that needs to be updated to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUpdateTag(slug: string, tag: Tag, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * DyondoApi - factory interface
 * @export
 */
export declare const DyondoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Delete A Blog by the slug
     * @summary Delete A Blog by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveBlog(slug: string, options?: any): AxiosPromise<void>;
    /**
     * Delete A Tag by the slug
     * @summary Delete A Tag by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveTag(slug: string, options?: any): AxiosPromise<void>;
    /**
     * Delete A Topic by the slug
     * @summary Delete A Topic by the slug
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRemoveTopic(slug: string, options?: any): AxiosPromise<void>;
    /**
     * Get a Blog by the slug
     * @summary Get a Blog by the slug
     * @param {string} slug Slug of the Blog to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlog(slug: string, options?: any): AxiosPromise<Blog>;
    /**
     * Get the main image of a Blog
     * @summary Get the main image of a Blog
     * @param {string} slug Slug of the Blog\&#39;s image to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogPhoto(slug: string, options?: any): AxiosPromise<void>;
    /**
     * Get all the Blogs
     * @summary Get all the Blogs
     * @param {string} [tag] Slug of the Tag used to tag the blogs
     * @param {string} [author] username of the author that wrote the blogs
     * @param {string} [search] Term used to search the blog
     * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
     * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogs(tag?: string | undefined, author?: string | undefined, search?: string | undefined, limit?: string | undefined, skip?: string | undefined, options?: any): AxiosPromise<void>;
    /**
     * Get all Blogs and all Tags
     * @summary Get all Blogs and all Tags
     * @param {string} [limit] Number of Blogs and Tags to be returned per pagination
     * @param {string} [skip] Number of Blogs and Tags to be skipped per pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogsAndTags(limit?: string | undefined, skip?: string | undefined, options?: any): AxiosPromise<void>;
    /**
     * Get all Blogs authored by User
     * @summary Get all Blogs authored by User
     * @param {string} username Username of the author of the Blogs to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveBlogsByUser(username: string, options?: any): AxiosPromise<void>;
    /**
     * Get all Blogs related to the provided Blog/slug
     * @summary Get all Blogs related to the provided Blog/slug
     * @param {string} slug Slug of the Blog related to the retrieved Blogs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveRelatedBlogs(slug: string, options?: any): AxiosPromise<void>;
    /**
     * Get A Tag by the slug
     * @summary Get A Tag by the slug
     * @param {string} slug Slug of the Tag to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTag(slug: string, options?: any): AxiosPromise<Tag>;
    /**
     * Get all the Tags
     * @summary Get all the Tags
     * @param {string} [topic] Topic slug of the Tags to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTags(topic?: string | undefined, options?: any): AxiosPromise<void>;
    /**
     * Get A Topic by the slug
     * @summary Get A Topic by the slug
     * @param {string} slug Slug of the Topic to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTopic(slug: string, options?: any): AxiosPromise<Topic>;
    /**
     * Get all the Topics
     * @summary Get all the Topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRetrieveTopics(options?: any): AxiosPromise<void>;
    /**
     * A Blog is like an article talking about a particular Topic
     * @summary A blog is like an article talking about a particular Topic
     * @param {Blog} blog The Blog object that needs to be added to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateBlog(blog: Blog, options?: any): AxiosPromise<void>;
    /**
     * A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @param {Tag} tag The Tag object that needs to be added to the DB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateTag(tag: Tag, options?: any): AxiosPromise<void>;
    /**
     * A topic that a blog is about, e.g Programming, Security, etc.
     * @summary A topic that a blog is about, e.g Programming, Security, etc.
     * @param {Topic} topic The Topic object that needs to be added to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCreateTopic(topic: Topic, options?: any): AxiosPromise<void>;
    /**
     * Update A Blog by the slug
     * @summary Update A Blog by the slug
     * @param {string} slug
     * @param {Blog} blog The Blog object that needs to be updated to the DB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUpdateBlog(slug: string, blog: Blog, options?: any): AxiosPromise<void>;
    /**
     * Update A Tag by the slug
     * @summary Update A Tag by the slug
     * @param {string} slug
     * @param {Tag} tag The Tag object that needs to be updated to the database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUpdateTag(slug: string, tag: Tag, options?: any): AxiosPromise<void>;
};
/**
 * Request parameters for deleteRemoveBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiDeleteRemoveBlogRequest
 */
export interface DyondoApiDeleteRemoveBlogRequest {
    /**
     *
     * @type {string}
     * @memberof DyondoApiDeleteRemoveBlog
     */
    readonly slug: string;
}
/**
 * Request parameters for deleteRemoveTag operation in DyondoApi.
 * @export
 * @interface DyondoApiDeleteRemoveTagRequest
 */
export interface DyondoApiDeleteRemoveTagRequest {
    /**
     *
     * @type {string}
     * @memberof DyondoApiDeleteRemoveTag
     */
    readonly slug: string;
}
/**
 * Request parameters for deleteRemoveTopic operation in DyondoApi.
 * @export
 * @interface DyondoApiDeleteRemoveTopicRequest
 */
export interface DyondoApiDeleteRemoveTopicRequest {
    /**
     *
     * @type {string}
     * @memberof DyondoApiDeleteRemoveTopic
     */
    readonly slug: string;
}
/**
 * Request parameters for getRetrieveBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogRequest
 */
export interface DyondoApiGetRetrieveBlogRequest {
    /**
     * Slug of the Blog to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlog
     */
    readonly slug: string;
}
/**
 * Request parameters for getRetrieveBlogPhoto operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogPhotoRequest
 */
export interface DyondoApiGetRetrieveBlogPhotoRequest {
    /**
     * Slug of the Blog\&#39;s image to be retrieved
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogPhoto
     */
    readonly slug: string;
}
/**
 * Request parameters for getRetrieveBlogs operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogsRequest
 */
export interface DyondoApiGetRetrieveBlogsRequest {
    /**
     * Slug of the Tag used to tag the blogs
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly tag?: string;
    /**
     * username of the author that wrote the blogs
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly author?: string;
    /**
     * Term used to search the blog
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly search?: string;
    /**
     * Number of Blogs and Tags to be returned per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly limit?: string;
    /**
     * Number of Blogs and Tags to be skipped per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogs
     */
    readonly skip?: string;
}
/**
 * Request parameters for getRetrieveBlogsAndTags operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogsAndTagsRequest
 */
export interface DyondoApiGetRetrieveBlogsAndTagsRequest {
    /**
     * Number of Blogs and Tags to be returned per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogsAndTags
     */
    readonly limit?: string;
    /**
     * Number of Blogs and Tags to be skipped per pagination
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogsAndTags
     */
    readonly skip?: string;
}
/**
 * Request parameters for getRetrieveBlogsByUser operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveBlogsByUserRequest
 */
export interface DyondoApiGetRetrieveBlogsByUserRequest {
    /**
     * Username of the author of the Blogs to be retrieved
     * @type {string}
     * @memberof DyondoApiGetRetrieveBlogsByUser
     */
    readonly username: string;
}
/**
 * Request parameters for getRetrieveRelatedBlogs operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveRelatedBlogsRequest
 */
export interface DyondoApiGetRetrieveRelatedBlogsRequest {
    /**
     * Slug of the Blog related to the retrieved Blogs
     * @type {string}
     * @memberof DyondoApiGetRetrieveRelatedBlogs
     */
    readonly slug: string;
}
/**
 * Request parameters for getRetrieveTag operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveTagRequest
 */
export interface DyondoApiGetRetrieveTagRequest {
    /**
     * Slug of the Tag to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveTag
     */
    readonly slug: string;
}
/**
 * Request parameters for getRetrieveTags operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveTagsRequest
 */
export interface DyondoApiGetRetrieveTagsRequest {
    /**
     * Topic slug of the Tags to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveTags
     */
    readonly topic?: string;
}
/**
 * Request parameters for getRetrieveTopic operation in DyondoApi.
 * @export
 * @interface DyondoApiGetRetrieveTopicRequest
 */
export interface DyondoApiGetRetrieveTopicRequest {
    /**
     * Slug of the Topic to be returned
     * @type {string}
     * @memberof DyondoApiGetRetrieveTopic
     */
    readonly slug: string;
}
/**
 * Request parameters for postCreateBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiPostCreateBlogRequest
 */
export interface DyondoApiPostCreateBlogRequest {
    /**
     * The Blog object that needs to be added to the database
     * @type {Blog}
     * @memberof DyondoApiPostCreateBlog
     */
    readonly blog: Blog;
}
/**
 * Request parameters for postCreateTag operation in DyondoApi.
 * @export
 * @interface DyondoApiPostCreateTagRequest
 */
export interface DyondoApiPostCreateTagRequest {
    /**
     * The Tag object that needs to be added to the DB
     * @type {Tag}
     * @memberof DyondoApiPostCreateTag
     */
    readonly tag: Tag;
}
/**
 * Request parameters for postCreateTopic operation in DyondoApi.
 * @export
 * @interface DyondoApiPostCreateTopicRequest
 */
export interface DyondoApiPostCreateTopicRequest {
    /**
     * The Topic object that needs to be added to the database
     * @type {Topic}
     * @memberof DyondoApiPostCreateTopic
     */
    readonly topic: Topic;
}
/**
 * Request parameters for putUpdateBlog operation in DyondoApi.
 * @export
 * @interface DyondoApiPutUpdateBlogRequest
 */
export interface DyondoApiPutUpdateBlogRequest {
    /**
     *
     * @type {string}
     * @memberof DyondoApiPutUpdateBlog
     */
    readonly slug: string;
    /**
     * The Blog object that needs to be updated to the DB
     * @type {Blog}
     * @memberof DyondoApiPutUpdateBlog
     */
    readonly blog: Blog;
}
/**
 * Request parameters for putUpdateTag operation in DyondoApi.
 * @export
 * @interface DyondoApiPutUpdateTagRequest
 */
export interface DyondoApiPutUpdateTagRequest {
    /**
     *
     * @type {string}
     * @memberof DyondoApiPutUpdateTag
     */
    readonly slug: string;
    /**
     * The Tag object that needs to be updated to the database
     * @type {Tag}
     * @memberof DyondoApiPutUpdateTag
     */
    readonly tag: Tag;
}
/**
 * DyondoApi - object-oriented interface
 * @export
 * @class DyondoApi
 * @extends {BaseAPI}
 */
export declare class DyondoApi extends BaseAPI {
    /**
     * Delete A Blog by the slug
     * @summary Delete A Blog by the slug
     * @param {DyondoApiDeleteRemoveBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    deleteRemoveBlog(requestParameters: DyondoApiDeleteRemoveBlogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete A Tag by the slug
     * @summary Delete A Tag by the slug
     * @param {DyondoApiDeleteRemoveTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    deleteRemoveTag(requestParameters: DyondoApiDeleteRemoveTagRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete A Topic by the slug
     * @summary Delete A Topic by the slug
     * @param {DyondoApiDeleteRemoveTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    deleteRemoveTopic(requestParameters: DyondoApiDeleteRemoveTopicRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a Blog by the slug
     * @summary Get a Blog by the slug
     * @param {DyondoApiGetRetrieveBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlog(requestParameters: DyondoApiGetRetrieveBlogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Blog, any>>;
    /**
     * Get the main image of a Blog
     * @summary Get the main image of a Blog
     * @param {DyondoApiGetRetrieveBlogPhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogPhoto(requestParameters: DyondoApiGetRetrieveBlogPhotoRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get all the Blogs
     * @summary Get all the Blogs
     * @param {DyondoApiGetRetrieveBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogs(requestParameters?: DyondoApiGetRetrieveBlogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get all Blogs and all Tags
     * @summary Get all Blogs and all Tags
     * @param {DyondoApiGetRetrieveBlogsAndTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogsAndTags(requestParameters?: DyondoApiGetRetrieveBlogsAndTagsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get all Blogs authored by User
     * @summary Get all Blogs authored by User
     * @param {DyondoApiGetRetrieveBlogsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveBlogsByUser(requestParameters: DyondoApiGetRetrieveBlogsByUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get all Blogs related to the provided Blog/slug
     * @summary Get all Blogs related to the provided Blog/slug
     * @param {DyondoApiGetRetrieveRelatedBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveRelatedBlogs(requestParameters: DyondoApiGetRetrieveRelatedBlogsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get A Tag by the slug
     * @summary Get A Tag by the slug
     * @param {DyondoApiGetRetrieveTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTag(requestParameters: DyondoApiGetRetrieveTagRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag, any>>;
    /**
     * Get all the Tags
     * @summary Get all the Tags
     * @param {DyondoApiGetRetrieveTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTags(requestParameters?: DyondoApiGetRetrieveTagsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get A Topic by the slug
     * @summary Get A Topic by the slug
     * @param {DyondoApiGetRetrieveTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTopic(requestParameters: DyondoApiGetRetrieveTopicRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Topic, any>>;
    /**
     * Get all the Topics
     * @summary Get all the Topics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    getRetrieveTopics(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * A Blog is like an article talking about a particular Topic
     * @summary A blog is like an article talking about a particular Topic
     * @param {DyondoApiPostCreateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    postCreateBlog(requestParameters: DyondoApiPostCreateBlogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @summary A tag that a blog has, e.g Java, Python, CircleCi, etc.
     * @param {DyondoApiPostCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    postCreateTag(requestParameters: DyondoApiPostCreateTagRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * A topic that a blog is about, e.g Programming, Security, etc.
     * @summary A topic that a blog is about, e.g Programming, Security, etc.
     * @param {DyondoApiPostCreateTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    postCreateTopic(requestParameters: DyondoApiPostCreateTopicRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update A Blog by the slug
     * @summary Update A Blog by the slug
     * @param {DyondoApiPutUpdateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    putUpdateBlog(requestParameters: DyondoApiPutUpdateBlogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update A Tag by the slug
     * @summary Update A Tag by the slug
     * @param {DyondoApiPutUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DyondoApi
     */
    putUpdateTag(requestParameters: DyondoApiPutUpdateTagRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
